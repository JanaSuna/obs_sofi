import os
import sys
import glob
import numpy as np
from astropy.io import fits
from matplotlib.ticker import ScalarFormatter, FormatStrFormatter
import matplotlib.pyplot as plt
import lsst.afw.image as afwImage
import matplotlib.patches as mpatches

def func(x, a, x0, sigma):
    return a*np.exp(-(x-x0)**2/(2*sigma**2))

def subtractImages(pathToImage1, pathToImage2, histname):

    img1 = afwImage.MaskedImageF(pathToImage1)
    img2 = afwImage.MaskedImageF(pathToImage2)
    
    arr1 = img1.getImage().getArray()
    arr2 = img2.getImage().getArray()
    
    
    
    img1 -=img2
    
    img1.writeFits("imgsubtracted.fits")
    
    arr = img1.getImage().getArray()
    arr2 = (arr1+arr2)/2.0
    
    meanVal = np.mean(arr2)
    print meanVal
    meanDev = np.mean(arr)
    print meanDev

    hdu = fits.PrimaryHDU(arr)
    hdu.writeto("arr.fits", clobber = True)
    hdu = fits.PrimaryHDU(arr2)
    hdu.writeto("arr2.fits", clobber = True)
    
    
    
    nx, ny = arr.shape

    bimg = np.zeros((nx,ny)) #image with pixel value = 1000 if the pixel deviation is too high and 0 otherwise
    
    devMax = np.abs(0.005*meanVal)
    arr = arr.ravel()
    apix = []
    for i in range(len(arr)):
        if arr[i]>devMax or arr[i]<-devMax:
            #print i, nx
            x = int(i%nx)
            y = int(i/nx)
            #print x,y
            bimg[x,y] = 1000
            apix.append(i)
            

    print("awfulpixels %d %f" % (len(apix), len(apix)/float(nx*ny)) )


    hdu = fits.PrimaryHDU(bimg)
    hdu.writeto("badpiximg.fits", clobber = True)

    #for each type of images flat, dark, postISR the range should be choosen accordingly
    #yn, bins = np.histogram(arr, bins = 51, density=False)
    yn, bins = np.histogram(arr, bins = 51, range=(-0.006,0.006), density=False)

    k = np.where(yn == yn.max())
    k = int(k[0])
    print k
    l = np.where(bins < bins[k]+devMax)
    l = l[0]
    l = l[-1]-k
    print "l", l

    devNum = (np.sum(yn[k+l+1:51])+np.sum(yn[0:k-l]))
    #number of deviated pixels


    widths = np.diff(bins)
    yn = yn.astype(float)
    yn/=float(nx*ny)


    k = np.where(yn == yn.max())
    k = k[0]
    
    mnp = ((1024*1024-devNum)*100/1024/1024) #percent of pixels within the error range
    if round(mnp) == 100:
        mnp = 99.9

    print (len(widths))


    3
    plt.bar(bins[k+l+1:51], yn[k+l+1:51], widths[k+l+1:51], color= "magenta")
    plt.bar(bins[k-l:k+l+1], yn[k-l:k+l+1], widths[k-l:k+l+1], color= "blue")

    plt.xlabel('Pixel value difference', size = 'medium')
    plt.ylabel('Number of pixels normalized to the total number of pixels', size = 'medium')
    plt.yscale('log')

    plt.axis([-0.006,0.006,1e-7,100])

    maxbin = "   Central bins contain %.1f" % mnp
    maxbin = maxbin + """%
    of total number of pixels"""



    devpxs = "Number of deviant pixels %d" % devNum

    plt.text(-0.0055, 0.01, devpxs, ha='left', va='top', size = 'medium')
    plt.text(-0.0055, 0.1, maxbin, ha='left', va='top', size = 'medium')
    print(yn[k])

    keytext = "more than %.1f" % np.abs(devMax*100/meanVal)
    keytext = "Pixel value difference\n"+ keytext + "%"

    mag_patch = mpatches.Patch(color='magenta', label=keytext)

    keytext = "less than %.1f" % np.abs(devMax*100/meanVal)
    keytext = "Pixel value difference\n"+ keytext + "%"

    blue_patch = mpatches.Patch(color='blue', label=keytext)
    extra = mpatches.Rectangle((0, 0), 1, 1, fc="w", fill=False, edgecolor='none', linewidth=0, label="*from mean pixel value")
    plt.legend(handles=[blue_patch, mag_patch,extra], fontsize = 12)


    meanWidth = np.mean(widths)
    
    delta = meanWidth/meanVal
    
    print delta

    plt.tick_params(axis='both', which='major', labelsize=12)

    d = .015

    """
    f.text(0.06, 0.5, 'Number of pixels normalized to the total number of pixels', ha='center', va='center', rotation='vertical', size = 'large')
    f.text(0.5, 0.04, 'Pixel values difference', ha='center', va='center', size = 'large')
    """

    plt.savefig(histname, orientation = 'landscape', format = 'png')
    plt.show()




if __name__ == "__main__":

    helpStr = """
   Usage: imageComparison.py image1 image2 histname
   Subtract image2 from image1, save the output image, plot a histogram, save in hist
    """
    
    if len(sys.argv) != 4:
        print helpStr
        sys.exit(0)

    pathToImage1 = sys.argv[1]
    pathToImage2 = sys.argv[2]
    histname = sys.argv[3]

    arr = subtractImages(pathToImage1, pathToImage2, histname)
