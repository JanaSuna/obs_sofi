#<?cfg paf policy ?>

needCalibRegistry: false

defaultLevel: "Ccd"

exposures: {
    raw: {
        template:    "FIELDS/%(pointing)s_%(dateObs)s/F02_%(pointing)s_%(expTime)d_%(expNum)03d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable: "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:        raw
    }
    postISRCCD: {
        template:    "FIELDS/postISR/%(dateObs)s_F02_%(pointing)s_%(expTime)d_%(expNum)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
    }
    icExp: {
        template:      "FIELDS/icExp/%(dateObs)s_F02_%(pointing)s_%(exptime)d_%(expNum)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
    }
    calexp: {
        template:      "FIELDS/calexp/%(dateObs)s_F02_%(pointing)s_%(exptime)d_%(expNum)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
    }

    coaddTempExp: {
        template:    "FIELDS/coaddTempExp/coadd_%(pointing)s.fits"
        python:      "lsst.afw.image.exposureF"
        persistable: "exposureF"
        storage:     "FitsStorage"
        tables:       "raw"
    }

}

calibrations: {
    dark: {
        template:    "calib/dark%(expTime)f.fits"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "calib"

    }
    flat: {
        template:    "flat/specialflat.fits"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "calib"
    }
}

datasets: {
    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored:ccdExposureId"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored:ccdExposureId_bits"
        tables:       "raw"
    }
    goodSeeingCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    goodSeeingCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    chiSquaredCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    chiSquaredCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    icExpBackground: {
        template:      "icExp/icExpBackground_v%(expNum)d.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    calexpBackground: {
        template:      "calexp/v%(expNum)d/bkgd.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    icSrc: {
        template:      "icSrc/%(dateObs)d/ICSRC-%(expnum)d_%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    icSrc_schema: {
        template:      "schema/icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    srcMatch: {
        template:      "srcMatch/v%(expNum)d_f%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    apCorr: {
        template:      "apCorr/v%(expNum)d_f%(filter)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
    }
    forced_src: {
        template:      "forced/%(tract)d/v%(expNum)d_f%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    forced_config: {
        template:      "config/forced.py"
        python:        "lsst.meas.base.forcedCcd.ForcedCcdMeasurementConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    forced_metadata: {
        template:      "forced_metadata/v%(expNum)d_f%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    forced_schema: {
        template:      "schema/forced.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    src: {
        template:      "src/SRC-%(expnum)d_%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    src_schema: {
        template:      "schema/src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    transformed_src: {
        template:      "transformed_src/v%(expNum)d_f%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    transformed_src_schema: {
        template:      "schema/transformed_src.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    modelfits: {
        template:      "modelfits/v%(expNum)d_f%(filter)s.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    modelfits_schema: {
        template:      "schema/modelfits.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepCoadd_modelfits: {
        template:      "deepCoadd_results/%(filter)s_t%(tract)d_p%(patch)s/modelfits_%(filter)s_%(tract)d_%(patch)s.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepCoadd_modelfits_schema: {
        template:      "schema/deepCoadd_modelfits.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepCoadd_multiModelfits: {
        template:      "deepCoadd_results/%(filter)s_t%(tract)d_p%(patch)s/multiModelfits_%(filter)s_%(tract)d_%(patch)s.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepCoadd_multiModelfits_schema: {
        template:      "schema/deepCoadd_multiModelfits.fits"
        python:        "lsst.meas.multifit.ModelFitCatalog"
        persistable:        "ModelFitCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    Mosaic_config: {
        template:      "config/mosaic.py"
        python:        "lsst.meas.mosaic.mosaicTask.MosaicConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    Mosaic_metadata: {
        template:      "metadata/Mosaic.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    processCcd_config: {
        template:      "config/processCcd.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    processCcd_metadata: {
        template:      "processCcd_metadata/v%(expNum)d_f%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    transformSrcMeasurement_config: {
        template:      "config/transformSrcMeasurement.py"
        python:        "lsst.pipe.tasks.transformMeasurement.RunTransformConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    transformSrcMeasurement_metadata: {
        template:      "transformSrcMeasurement_metadata/v%(expNum)d_f%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    measureCcd_config: {
        template:      "config/measureCcd.py"
        python:        "lsst.meas.multifit.measureCcd.MeasureCcdConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    measureCcd_metadata: {
        template:      "measureCcd_metadata/v%(expNum)d_f%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    IngestIndexedReferenceTask_config: {
        template:      "config/IngestIndexedReferenceTask.py"
        python:        "lsst.pipe.tasks.indexReferenceTask.IngestIndexedReferenceConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    cal_ref_cat: {
        persistable: SourceCatalog
        python: lsst.afw.table.SourceCatalog
        storage: FitsCatalogStorage
        table: ignored
        template: photo_astro_ref/%(pixel_id)s.fits
    }
    refcat: {
        template:      "refcat.fits"
        python:        "lsst.afw.table.SimpleCatalog"
        persistable:        "SimpleCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    dark_config: {
        template: "config/dark.py"
        python: "lsst.pipe.drivers.constructCalibs.DarkConfig"
        persistable: "Config"
        storage: "ConfigStorage"
        tables: raw
    }
    flat_config: {
        template: "config/flat.py"
        python: "lsst.pipe.drivers.constructCalibs.FlatConfig"
        persistable: "Config"
        storage: "ConfigStorage"
        tables: raw
    }
}
